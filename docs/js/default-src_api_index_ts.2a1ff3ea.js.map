{"version":3,"file":"js/default-src_api_index_ts.2a1ff3ea.js","mappings":"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","sources":["webpack://sourcedao-pc-dapp/./src/api/contract.ts","webpack://sourcedao-pc-dapp/./src/api/user/index.ts","webpack://sourcedao-pc-dapp/./src/api/nft/index.ts"],"sourcesContent":["import { keyStores, KeyPair, Contract, connect } from 'near-api-js'\n\nimport store from '@store/index'\n\nimport { CONNECTIONCONFIG, CONTRACTID } from './config'\n\nexport interface ContractError {\n  kind: {\n    ExecutionError: string\n  }\n}\n\nexport default class Contracts {\n  protected address = CONTRACTID\n  protected viewMethods: string[] = []\n  protected changeMethods: string[] = []\n  // protected contract!: UserContract\n  protected _contract: Contract | undefined\n\n  protected async senderChangeMethod(\n    methodName: string,\n    args?: Record<string, unknown>,\n    deposit?: string\n  ): Promise<string> {\n    const tx = {\n      receiverId: this.address,\n      actions: [\n        {\n          methodName,\n          args,\n          deposit\n        },\n      ],\n    }\n\n    const res = await window.near!.signAndSendTransaction(tx)\n\n    return window.atob(res.response[0].status.SuccessValue)\n  }\n\n  protected async senderViewMethod<T>(\n    methodName: string,\n    args?: Record<string, unknown>\n  ): Promise<T> {\n    return window.near!.account().viewFunction(this.address, methodName, args)\n  }\n\n  protected async near(): Promise<void> {\n    const { accountAddress, accessKey } = store.getState().wallet\n\n    const keyStore = new keyStores.InMemoryKeyStore()\n    const keyPair = KeyPair.fromString(accessKey!.secretKey)\n    await keyStore.setKey(CONNECTIONCONFIG.networkId, accountAddress, keyPair)\n    const near = await connect(Object.assign({ keyStore }, CONNECTIONCONFIG))\n    const account = await near.account(accountAddress)\n    this._contract = new Contract(account, this.address, {\n      viewMethods: this.viewMethods,\n      changeMethods: this.changeMethods,\n    })\n  }\n\n  protected async changeContract(\n    methodName: string,\n    args?: Record<string, unknown>,\n    deposit?: string\n  ): Promise<string> {\n    const { currentWallet } = store.getState().wallet\n    switch (currentWallet) {\n      case 'Sender':\n        return this.senderChangeMethod(methodName, args, deposit)\n      default:\n        throw Error()\n    }\n  }\n\n  protected async viewContract<T>(\n    methodName: string,\n    args?: Record<string, unknown>,\n  ): Promise<T> {\n    const { currentWallet } = store.getState().wallet\n    switch (currentWallet) {\n      case 'Sender':\n        return this.senderViewMethod<T>(methodName, args)\n      default:\n        throw Error()\n    }\n  }\n}\n","import Contracts from '@api/contract'\nimport type { Friends } from '@store/modules/friends'\nimport type { Room } from '@store/modules/room'\ninterface RoomListRes {\n  0: number\n  1: Room\n}\n\nclass User extends Contracts {\n  changeMethods = ['register', 'login', 'add_friend']\n\n  viewMethods = ['get_friend_list']\n\n  async register(name: string, image: string): Promise<boolean> {\n    const res = await this.changeContract('register', { name, image })\n    return JSON.parse(res)\n  }\n\n  async login(hash: string): Promise<[string, string]> {\n    const res = await this.changeContract('login', { hash })\n    return JSON.parse(res)\n  }\n\n  async get_friend_list(account_id: string): Promise<Friends[]> {\n    return this.viewContract<Friends[]>('get_friend_list', { account_id })\n  }\n\n  async add_friend(friend_account_id: string): Promise<boolean> {\n    const res = await this.changeContract('add_friend', { friend_account_id })\n    return JSON.parse(res)\n  }\n\n  async get_room_list(): Promise<RoomListRes[]> {\n    return this.viewContract<RoomListRes[]>('get_room_list')\n  }\n\n  async create_room(name: string, nft: string[]): Promise<number> {\n    const res = await this.changeContract('create_room', { name, nft })\n    return JSON.parse(res)\n  }\n\n  async destory_room(room_id: number): Promise<number> {\n    const res = await this.changeContract('destory_room', { room_id })\n    return JSON.parse(res)\n  }\n}\n\nlet instance\n\nexport default (() => {\n  if (instance) return instance\n  instance = new User()\n  return instance\n})()\n","import Contracts from '@api/contract'\nimport { NFT_CONTRACTID } from '@api/config'\n\nexport interface Token {\n  token_id: string\n  metadata: {\n    title: string\n    media: string\n  }\n}\n\nclass Nft extends Contracts {\n  address = NFT_CONTRACTID\n\n  async nft_mint(receiver_id: string): Promise<boolean> {\n    const token_series_id = '3'\n    const res = await this.changeContract(\n      'nft_mint',\n      {\n        token_series_id,\n        receiver_id,\n      },\n      '100000000000000000000000'\n    )\n    return JSON.parse(res)\n  }\n\n  async nft_tokens_owner(owner_id: string): Promise<Token[]> {\n    return this.viewContract<Token[]>('nft_tokens_owner', { owner_id })\n  }\n}\n\nlet instance\n\nexport default (() => {\n  if (instance) return instance\n  instance = new Nft()\n  return instance\n})()\n"],"names":["Contracts","CONTRACTID","methodName","args","deposit","tx","receiverId","this","address","actions","window","near","signAndSendTransaction","res","atob","response","status","SuccessValue","account","viewFunction","store","wallet","accountAddress","accessKey","keyStore","keyStores","keyPair","KeyPair","secretKey","setKey","CONNECTIONCONFIG","connect","Object","assign","_contract","Contract","viewMethods","changeMethods","currentWallet","senderChangeMethod","Error","senderViewMethod","i","instance","User","name","image","changeContract","JSON","parse","hash","account_id","viewContract","friend_account_id","nft","room_id","NFT_CONTRACTID","receiver_id","token_series_id","owner_id"],"sourceRoot":""}