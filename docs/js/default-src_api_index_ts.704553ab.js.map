{"version":3,"file":"js/default-src_api_index_ts.704553ab.js","mappings":"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","sources":["webpack://sourcedao-pc-dapp/./src/api/contract.ts","webpack://sourcedao-pc-dapp/./src/api/user/index.ts"],"sourcesContent":["import { keyStores, KeyPair, Contract, connect } from 'near-api-js'\n\nimport store from '@store/index'\n\nimport { CONNECTIONCONFIG, CONTRACTID } from './config'\n\nexport interface ContractError {\n  kind: {\n    ExecutionError: string\n  }\n}\n\nexport default class Contracts {\n  protected address = CONTRACTID\n  protected viewMethods: string[] = []\n  protected changeMethods: string[] = []\n  // protected contract!: UserContract\n  protected _contract: Contract | undefined\n\n  protected async senderChangeMethod(\n    methodName: string,\n    args?: Record<string, string>\n  ): Promise<string> {\n    const tx = {\n      receiverId: this.address,\n      actions: [\n        {\n          methodName,\n          args,\n        },\n      ],\n    }\n\n    const res = await window.near!.signAndSendTransaction(tx)\n\n    return window.atob(res.response[0].status.SuccessValue)\n  }\n\n  protected async senderViewMethod<T>(\n    methodName: string,\n    args?: Record<string, string>\n  ): Promise<T> {\n    return window.near!.account().viewFunction(this.address, methodName, args)\n  }\n\n  protected async near(): Promise<void> {\n    const { accountAddress, accessKey } = store.getState().wallet\n\n    const keyStore = new keyStores.InMemoryKeyStore()\n    const keyPair = KeyPair.fromString(accessKey!.secretKey)\n    await keyStore.setKey(CONNECTIONCONFIG.networkId, accountAddress, keyPair)\n    const near = await connect(Object.assign({ keyStore }, CONNECTIONCONFIG))\n    const account = await near.account(accountAddress)\n    this._contract = new Contract(account, this.address, {\n      viewMethods: this.viewMethods,\n      changeMethods: this.changeMethods,\n    })\n  }\n\n  protected async changeContract(\n    methodName: string,\n    args?: Record<string, string>\n  ): Promise<string> {\n    const { currentWallet } = store.getState().wallet\n    switch (currentWallet) {\n      case 'Sender':\n        return this.senderChangeMethod(methodName, args)\n      default:\n        throw Error()\n    }\n  }\n\n  protected async viewContract<T>(\n    methodName: string,\n    args?: Record<string, string>\n  ): Promise<T> {\n    const { currentWallet } = store.getState().wallet\n    switch (currentWallet) {\n      case 'Sender':\n        return this.senderViewMethod<T>(methodName, args)\n      default:\n        throw Error()\n    }\n  }\n}\n","import Contracts from '@api/contract'\nimport { Friends } from '@store/modules/friends'\n\ninterface UserContract {\n  register: (params: { name: string; image: string }) => boolean\n  login: (params: { hash: string }) => [string, string]\n  get_friend_list: (params: { account_id: string }) => Friends[]\n  add_friend: (params: { friend_account_id: string }) => boolean\n}\n\nclass User extends Contracts {\n  changeMethods = ['register', 'login', 'add_friend']\n\n  viewMethods = ['get_friend_list']\n\n  contract(): UserContract {\n    return (this._contract as unknown) as UserContract\n  }\n\n  async register(name: string, image: string): Promise<boolean> {\n    const res = await this.changeContract('register', { name, image })\n    return JSON.parse(res)\n  }\n\n  async login(hash: string): Promise<[string, string]> {\n    const res = await this.changeContract('login', { hash })\n    return JSON.parse(res)\n  }\n\n  async get_friend_list(account_id: string): Promise<Friends[]> {\n    return this.viewContract<Friends[]>('get_friend_list', { account_id })\n  }\n\n  async add_friend(friend_account_id: string): Promise<boolean> {\n    const res = await this.changeContract('add_friend', { friend_account_id })\n    return JSON.parse(res)\n  }\n}\n\nlet instance\n\nexport default (() => {\n  if (instance) return instance\n  instance = new User()\n  return instance\n})()\n"],"names":["instance","Contracts","CONTRACTID","methodName","args","tx","receiverId","this","address","actions","window","near","signAndSendTransaction","res","atob","response","status","SuccessValue","account","viewFunction","store","wallet","accountAddress","accessKey","keyStore","keyStores","keyPair","KeyPair","secretKey","setKey","CONNECTIONCONFIG","connect","Object","assign","_contract","Contract","viewMethods","changeMethods","currentWallet","senderChangeMethod","Error","senderViewMethod","i","name","image","changeContract","JSON","parse","hash","account_id","viewContract","friend_account_id"],"sourceRoot":""}