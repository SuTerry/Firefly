{"version":3,"file":"js/default-src_api_index_ts.a89c1ee2.js","mappings":"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","sources":["webpack://sourcedao-pc-dapp/./src/api/contract.ts","webpack://sourcedao-pc-dapp/./src/api/user/index.ts","webpack://sourcedao-pc-dapp/./src/api/nft/index.ts"],"sourcesContent":["import { keyStores, KeyPair, Contract, connect } from 'near-api-js'\r\n\r\nimport store from '@store/index'\r\n\r\nimport { CONNECTIONCONFIG, CONTRACTID } from './config'\r\n\r\nexport interface ContractError {\r\n  kind: {\r\n    ExecutionError: string\r\n  }\r\n}\r\n\r\nexport default class Contracts {\r\n  protected address = CONTRACTID\r\n  protected viewMethods: string[] = []\r\n  protected changeMethods: string[] = []\r\n  // protected contract!: UserContract\r\n  protected _contract: Contract | undefined\r\n\r\n  protected async senderChangeMethod(\r\n    methodName: string,\r\n    args?: Record<string, unknown>,\r\n    deposit?: string\r\n  ): Promise<string> {\r\n    const tx = {\r\n      receiverId: this.address,\r\n      actions: [\r\n        {\r\n          methodName,\r\n          args,\r\n          deposit,\r\n        },\r\n      ],\r\n    }\r\n\r\n    const res = await window.near!.signAndSendTransaction(tx)\r\n\r\n    return window.atob(res.response[0].status.SuccessValue)\r\n  }\r\n  protected async senderChangeMethods(\r\n    actions: SASTParamsActions[]\r\n  ): Promise<string> {\r\n    const tx = {\r\n      receiverId: this.address,\r\n      actions,\r\n    }\r\n\r\n    const res = await window.near!.signAndSendTransaction(tx)\r\n\r\n    return window.atob(res.response[0].status.SuccessValue)\r\n  }\r\n\r\n  protected async senderViewMethod<T>(\r\n    methodName: string,\r\n    args?: Record<string, unknown>\r\n  ): Promise<T> {\r\n    return window.near!.account().viewFunction(this.address, methodName, args)\r\n  }\r\n\r\n  protected async near(): Promise<void> {\r\n    const { accountAddress, accessKey } = store.getState().wallet\r\n\r\n    const keyStore = new keyStores.InMemoryKeyStore()\r\n    const keyPair = KeyPair.fromString(accessKey!.secretKey)\r\n    await keyStore.setKey(CONNECTIONCONFIG.networkId, accountAddress, keyPair)\r\n    const near = await connect(Object.assign({ keyStore }, CONNECTIONCONFIG))\r\n    const account = await near.account(accountAddress)\r\n    this._contract = new Contract(account, this.address, {\r\n      viewMethods: this.viewMethods,\r\n      changeMethods: this.changeMethods,\r\n    })\r\n  }\r\n\r\n  protected async changeContract(\r\n    methodName: string,\r\n    args?: Record<string, unknown>,\r\n    deposit?: string\r\n  ): Promise<string> {\r\n    const { currentWallet } = store.getState().wallet\r\n    switch (currentWallet) {\r\n      case 'Sender':\r\n        return this.senderChangeMethod(methodName, args, deposit)\r\n      default:\r\n        throw Error()\r\n    }\r\n  }\r\n\r\n  protected async changeContracts(\r\n    actions: SASTParamsActions[]\r\n  ): Promise<string> {\r\n    const { currentWallet } = store.getState().wallet\r\n    switch (currentWallet) {\r\n      case 'Sender':\r\n        return this.senderChangeMethods(actions)\r\n      default:\r\n        throw Error()\r\n    }\r\n  }\r\n\r\n  protected async viewContract<T>(\r\n    methodName: string,\r\n    args?: Record<string, unknown>\r\n  ): Promise<T> {\r\n    const { currentWallet } = store.getState().wallet\r\n    switch (currentWallet) {\r\n      case 'Sender':\r\n        return this.senderViewMethod<T>(methodName, args)\r\n      default:\r\n        throw Error()\r\n    }\r\n  }\r\n}\r\n","import Contracts from '@api/contract'\r\nimport type { Friends } from '@store/modules/friends'\r\nimport type { Room } from '@store/modules/room'\r\ninterface RoomListRes {\r\n  0: number\r\n  1: Room\r\n}\r\n\r\nclass User extends Contracts {\r\n  changeMethods = ['register', 'login', 'add_friend']\r\n\r\n  viewMethods = ['get_friend_list']\r\n\r\n  async register(name: string, image: string): Promise<boolean> {\r\n    const res = await this.changeContract('register', { name, image })\r\n    return JSON.parse(res)\r\n  }\r\n\r\n  async login(hash: string): Promise<[string, string]> {\r\n    const res = await this.changeContract('login', { hash })\r\n    return JSON.parse(res)\r\n  }\r\n\r\n  async get_friend_list(account_id: string): Promise<Friends[]> {\r\n    return this.viewContract<Friends[]>('get_friend_list', { account_id })\r\n  }\r\n\r\n  async add_friend(friend_account_id: string): Promise<Friends> {\r\n    const res = await this.changeContract('add_friend', { friend_account_id })\r\n    return JSON.parse(res)\r\n  }\r\n\r\n  async get_room_list(): Promise<RoomListRes[]> {\r\n    return this.viewContract<RoomListRes[]>('get_room_list')\r\n  }\r\n\r\n  async create_room(name: string, nft: string[]): Promise<number> {\r\n    const res = await this.changeContract('create_room', { name, nft })\r\n    return JSON.parse(res)\r\n  }\r\n\r\n  async destory_room(room_id: number): Promise<number> {\r\n    const res = await this.changeContract('destory_room', { room_id })\r\n    return JSON.parse(res)\r\n  }\r\n\r\n  async account_info(account_id: string): Promise<[string, string]> {\r\n    return this.viewContract<[string, string]>('account_info', { account_id })\r\n  }\r\n}\r\n\r\nlet instance\r\n\r\nexport default (() => {\r\n  if (instance) return instance\r\n  instance = new User()\r\n  return instance\r\n})()\r\n","import Contracts from '@api/contract'\r\nimport { NFT_CONTRACTID } from '@api/config'\r\n\r\nexport interface Token {\r\n  token_id: string\r\n  metadata: {\r\n    title: string\r\n    media: string\r\n  }\r\n}\r\n\r\nclass Nft extends Contracts {\r\n  address = NFT_CONTRACTID\r\n\r\n  async nft_mint(receiver_ids: string[]): Promise<boolean> {\r\n    const methodName = 'nft_mint'\r\n    const token_series_id = '1'\r\n    const deposit = '100000000000000000000000'\r\n    const actions = receiver_ids.map((receiver_id) => ({\r\n      methodName,\r\n      args: { token_series_id, receiver_id },\r\n      deposit,\r\n    }))\r\n    const res = await this.changeContracts(actions)\r\n    return JSON.parse(res)\r\n  }\r\n\r\n  async nft_tokens_owner(owner_id: string): Promise<Token[]> {\r\n    return this.viewContract<Token[]>('nft_tokens_owner', { owner_id })\r\n  }\r\n}\r\n\r\nlet instance\r\n\r\nexport default (() => {\r\n  if (instance) return instance\r\n  instance = new Nft()\r\n  return instance\r\n})()\r\n"],"names":["Contracts","CONTRACTID","methodName","args","deposit","tx","receiverId","this","address","actions","window","near","signAndSendTransaction","res","atob","response","status","SuccessValue","account","viewFunction","store","wallet","accountAddress","accessKey","keyStore","keyStores","keyPair","KeyPair","secretKey","setKey","CONNECTIONCONFIG","connect","Object","assign","_contract","Contract","viewMethods","changeMethods","currentWallet","senderChangeMethod","Error","senderChangeMethods","senderViewMethod","i","instance","User","name","image","changeContract","JSON","parse","hash","account_id","viewContract","friend_account_id","nft","room_id","NFT_CONTRACTID","receiver_ids","map","receiver_id","token_series_id","changeContracts","owner_id"],"sourceRoot":""}