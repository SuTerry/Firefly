{"version":3,"file":"js/node_modules_lingo3d-react_dist_MeshReflectorMaterial_fbc36eec_mjs.da588eb5.js","mappings":"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","sources":["webpack://sourcedao-pc-dapp/./node_modules/lingo3d-react/dist/MeshReflectorMaterial.fbc36eec.mjs"],"sourcesContent":["import { M as _, au as S, a, g as h, V as f, i as b, Z as m, av as u, aw as D, ax as B, ay as y, az as C } from \"./index.e61493f3.mjs\";\nimport \"react\";\nimport \"react-dom\";\nclass W extends _ {\n  constructor(e, r, i, t, { mixBlur: o = 0, mixStrength: c = 1, resolution: d = 256, blur: s = [0, 0], minDepthThreshold: p = 0.9, maxDepthThreshold: x = 1, depthScale: n = 0, depthToBlurRatioBias: v = 0.25, mirror: g = 0, distortion: P = 1, mixContrast: M = 1, distortionMap: l, reflectorOffset: w = 0, planeNormal: U = new a(0, 0, 1) } = {}) {\n    super(), this.gl = e, this.camera = r, this.scene = i, this.parent = t, this.hasBlur = s[0] + s[1] > 0, this.reflectorPlane = new S(), this.normal = new a(), this.reflectorWorldPosition = new a(), this.cameraWorldPosition = new a(), this.rotationMatrix = new h(), this.lookAtPosition = new a(0, -1, 0), this.clipPlane = new f(), this.view = new a(), this.target = new a(), this.q = new f(), this.textureMatrix = new h(), this.virtualCamera = new b(), this.reflectorOffset = w, this.planeNormal = U, this.setupBuffers(d, s), this.reflectorProps = {\n      mirror: g,\n      textureMatrix: this.textureMatrix,\n      mixBlur: o,\n      tDiffuse: this.fbo1.texture,\n      tDepth: this.fbo1.depthTexture,\n      tDiffuseBlur: this.fbo2.texture,\n      hasBlur: this.hasBlur,\n      mixStrength: c,\n      minDepthThreshold: p,\n      maxDepthThreshold: x,\n      depthScale: n,\n      depthToBlurRatioBias: v,\n      distortion: P,\n      distortionMap: l,\n      mixContrast: M,\n      \"defines-USE_BLUR\": this.hasBlur ? \"\" : void 0,\n      \"defines-USE_DEPTH\": n > 0 ? \"\" : void 0,\n      \"defines-USE_DISTORTION\": l ? \"\" : void 0\n    };\n  }\n  setupBuffers(e, r) {\n    const i = {\n      minFilter: m,\n      magFilter: m,\n      encoding: this.gl.outputEncoding\n    }, t = new u(e, e, i);\n    t.depthBuffer = !0, t.depthTexture = new D(e, e), t.depthTexture.format = B, t.depthTexture.type = y;\n    const o = new u(e, e, i);\n    this.fbo1 = t, this.fbo2 = o, this.kawaseBlurPass = new C(), this.kawaseBlurPass.setSize(r[0], r[1]);\n  }\n  beforeRender() {\n    if (!this.parent || (this.reflectorWorldPosition.setFromMatrixPosition(this.parent.matrixWorld), this.cameraWorldPosition.setFromMatrixPosition(this.camera.matrixWorld), this.rotationMatrix.extractRotation(this.parent.matrixWorld), this.normal.copy(this.planeNormal), this.normal.applyMatrix4(this.rotationMatrix), this.reflectorWorldPosition.addScaledVector(this.normal, this.reflectorOffset), this.view.subVectors(this.reflectorWorldPosition, this.cameraWorldPosition), this.view.dot(this.normal) > 0))\n      return;\n    this.view.reflect(this.normal).negate(), this.view.add(this.reflectorWorldPosition), this.rotationMatrix.extractRotation(this.camera.matrixWorld), this.lookAtPosition.set(0, 0, -1), this.lookAtPosition.applyMatrix4(this.rotationMatrix), this.lookAtPosition.add(this.cameraWorldPosition), this.target.subVectors(this.reflectorWorldPosition, this.lookAtPosition), this.target.reflect(this.normal).negate(), this.target.add(this.reflectorWorldPosition), this.virtualCamera.position.copy(this.view), this.virtualCamera.up.set(0, 1, 0), this.virtualCamera.up.applyMatrix4(this.rotationMatrix), this.virtualCamera.up.reflect(this.normal), this.virtualCamera.lookAt(this.target), this.virtualCamera.far = this.camera.far, this.virtualCamera.updateMatrixWorld(), this.virtualCamera.projectionMatrix.copy(this.camera.projectionMatrix), this.textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1), this.textureMatrix.multiply(this.virtualCamera.projectionMatrix), this.textureMatrix.multiply(this.virtualCamera.matrixWorldInverse), this.textureMatrix.multiply(this.parent.matrixWorld), this.reflectorPlane.setFromNormalAndCoplanarPoint(this.normal, this.reflectorWorldPosition), this.reflectorPlane.applyMatrix4(this.virtualCamera.matrixWorldInverse), this.clipPlane.set(this.reflectorPlane.normal.x, this.reflectorPlane.normal.y, this.reflectorPlane.normal.z, this.reflectorPlane.constant);\n    const e = this.virtualCamera.projectionMatrix;\n    this.q.x = (Math.sign(this.clipPlane.x) + e.elements[8]) / e.elements[0], this.q.y = (Math.sign(this.clipPlane.y) + e.elements[9]) / e.elements[5], this.q.z = -1, this.q.w = (1 + e.elements[10]) / e.elements[14], this.clipPlane.multiplyScalar(2 / this.clipPlane.dot(this.q)), e.elements[2] = this.clipPlane.x, e.elements[6] = this.clipPlane.y, e.elements[10] = this.clipPlane.z + 1, e.elements[14] = this.clipPlane.w;\n  }\n  update() {\n    if (this.parent.material !== this)\n      return;\n    this.parent.visible = !1;\n    const e = this.gl.xr.enabled, r = this.gl.shadowMap.autoUpdate;\n    this.beforeRender(), this.gl.xr.enabled = !1, this.gl.shadowMap.autoUpdate = !1, this.gl.setRenderTarget(this.fbo1), this.gl.state.buffers.depth.setMask(!0), this.gl.autoClear || this.gl.clear(), this.gl.render(this.scene, this.virtualCamera), this.hasBlur && this.kawaseBlurPass.render(this.gl, this.fbo1, this.fbo2), this.gl.xr.enabled = e, this.gl.shadowMap.autoUpdate = r, this.parent.visible = !0, this.gl.setRenderTarget(null);\n  }\n  onBeforeCompile(e, ...r) {\n    super.onBeforeCompile(e, ...r), this.defines === void 0 && (this.defines = {}), this.defines.USE_UV || (this.defines.USE_UV = \"\"), this.reflectorProps[\"defines-USE_BLUR\"] !== void 0 && (this.defines.USE_BLUR = \"\"), this.reflectorProps[\"defines-USE_DEPTH\"] !== void 0 && (this.defines.USE_DEPTH = \"\"), this.reflectorProps[\"defines-USE_DISTORTION\"] !== void 0 && (this.defines.USE_DISTORTION = \"\");\n    let i = this.reflectorProps;\n    for (let t in i)\n      e.uniforms[t] = {\n        get value() {\n          return i[t];\n        }\n      };\n    e.vertexShader = `\n              uniform mat4 textureMatrix;\n              varying vec4 my_vUv;     \n            ${e.vertexShader}`, e.vertexShader = e.vertexShader.replace(\n      \"#include <project_vertex>\",\n      `\n            #include <project_vertex>\n            my_vUv = textureMatrix * vec4( position, 1.0 );\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            `\n    ), e.fragmentShader = `\n              uniform sampler2D tDiffuse;\n              uniform sampler2D tDiffuseBlur;\n              uniform sampler2D tDepth;\n              uniform sampler2D distortionMap;\n              uniform float distortion;\n              uniform float cameraNear;\n              uniform float cameraFar;\n              uniform bool hasBlur;\n              uniform float mixBlur;\n              uniform float mirror;\n              uniform float mixStrength;\n              uniform float minDepthThreshold;\n              uniform float maxDepthThreshold;\n              uniform float mixContrast;\n              uniform float depthScale;\n              uniform float depthToBlurRatioBias;\n              varying vec4 my_vUv;        \n              ${e.fragmentShader}`, e.fragmentShader = e.fragmentShader.replace(\n      \"#include <emissivemap_fragment>\",\n      `\n            #include <emissivemap_fragment>\n          \n            float distortionFactor = 0.0;\n            #ifdef USE_DISTORTION\n              distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n            #endif\n      \n            vec4 new_vUv = my_vUv;\n            new_vUv.x += distortionFactor;\n            new_vUv.y += distortionFactor;\n      \n            vec4 base = texture2DProj(tDiffuse, new_vUv);\n            vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n            \n            vec4 merge = base;\n            \n            #ifdef USE_NORMALMAP\n              vec2 normal_uv = vec2(0.0);\n              vec4 normalColor = texture2D(normalMap, vUv);\n              vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n              vec3 coord = new_vUv.xyz / new_vUv.w;\n              normal_uv = coord.xy + coord.z * my_normal.xz * 0.05 * normalScale;\n              vec4 base_normal = texture2D(tDiffuse, normal_uv);\n              vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n              merge = base_normal;\n              blur = blur_normal;\n            #endif\n      \n            float depthFactor = 0.0001;\n            float blurFactor = 0.0;\n      \n            #ifdef USE_DEPTH\n              vec4 depth = texture2DProj(tDepth, new_vUv);\n              depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n              depthFactor *= depthScale;\n              depthFactor = max(0.0001, min(1.0, depthFactor));\n      \n              #ifdef USE_BLUR\n                blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n                merge = merge * min(1.0, depthFactor + 0.5);\n              #else\n                merge = merge * depthFactor;\n              #endif\n        \n            #endif\n      \n            float reflectorRoughnessFactor = roughness;\n            #ifdef USE_ROUGHNESSMAP\n              vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n              \n              reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n            #endif\n            \n            #ifdef USE_BLUR\n              blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n              merge = mix(merge, blur, blurFactor);\n            #endif\n      \n            vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n            newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n            newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n            newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n            \n            diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n            `\n    );\n  }\n}\nexport {\n  W as default\n};\n"],"names":["W","constructor","e","r","i","t","mixBlur","o","mixStrength","c","resolution","d","blur","s","minDepthThreshold","p","maxDepthThreshold","x","depthScale","n","depthToBlurRatioBias","v","mirror","g","distortion","P","mixContrast","M","distortionMap","l","reflectorOffset","w","planeNormal","U","a","super","this","gl","camera","scene","parent","hasBlur","reflectorPlane","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","setupBuffers","reflectorProps","tDiffuse","fbo1","texture","tDepth","depthTexture","tDiffuseBlur","fbo2","minFilter","magFilter","encoding","outputEncoding","depthBuffer","format","type","kawaseBlurPass","setSize","beforeRender","setFromMatrixPosition","matrixWorld","extractRotation","copy","applyMatrix4","addScaledVector","subVectors","dot","reflect","negate","add","set","position","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","y","z","constant","Math","sign","elements","multiplyScalar","update","material","visible","xr","enabled","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","onBeforeCompile","defines","USE_UV","USE_BLUR","USE_DEPTH","USE_DISTORTION","uniforms","value","vertexShader","replace","fragmentShader"],"sourceRoot":""}