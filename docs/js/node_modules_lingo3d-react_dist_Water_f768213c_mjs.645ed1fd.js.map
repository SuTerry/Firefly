{"version":3,"file":"js/node_modules_lingo3d-react_dist_Water_f768213c_mjs.645ed1fd.js","mappings":"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","sources":["webpack://sourcedao-pc-dapp/./node_modules/lingo3d-react/dist/Water.f768213c.mjs"],"sourcesContent":["import { m as G, a as i, e as w, ae as X, au as J, g as C, V as D, i as K, av as O, aA as b, aB as P, aC as Q } from \"./index.e61493f3.mjs\";\nimport \"react\";\nimport \"react-dom\";\nclass re extends G {\n  constructor(W, e = {}) {\n    super(W), this.isWater = !0;\n    const s = this, z = e.textureWidth !== void 0 ? e.textureWidth : 512, N = e.textureHeight !== void 0 ? e.textureHeight : 512, F = e.clipBias !== void 0 ? e.clipBias : 0, L = e.alpha !== void 0 ? e.alpha : 1, T = e.time !== void 0 ? e.time : 0, R = e.waterNormals !== void 0 ? e.waterNormals : null, U = e.sunDirection !== void 0 ? e.sunDirection : new i(0.70707, 0.70707, 0), j = new w(e.sunColor !== void 0 ? e.sunColor : 16777215), k = new w(e.waterColor !== void 0 ? e.waterColor : 8355711), S = e.eye !== void 0 ? e.eye : new i(0, 0, 0), V = e.distortionScale !== void 0 ? e.distortionScale : 20, A = e.side !== void 0 ? e.side : X, B = e.fog !== void 0 ? e.fog : !1, u = new J(), l = new i(), c = new i(), h = new i(), d = new C(), x = new i(0, 0, -1), n = new D(), f = new i(), p = new i(), v = new D(), g = new C(), t = new K(), M = new O(z, N), y = {\n      uniforms: b.merge([\n        P.fog,\n        P.lights,\n        {\n          normalSampler: { value: null },\n          mirrorSampler: { value: null },\n          alpha: { value: 1 },\n          time: { value: 0 },\n          size: { value: 1 },\n          distortionScale: { value: 20 },\n          textureMatrix: { value: new C() },\n          sunColor: { value: new w(8355711) },\n          sunDirection: { value: new i(0.70707, 0.70707, 0) },\n          eye: { value: new i() },\n          waterColor: { value: new w(5592405) }\n        }\n      ]),\n      vertexShader: `\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}`,\n      fragmentShader: `\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t}`\n    }, o = new Q({\n      fragmentShader: y.fragmentShader,\n      vertexShader: y.vertexShader,\n      uniforms: b.clone(y.uniforms),\n      lights: !0,\n      side: A,\n      fog: B\n    });\n    o.uniforms.mirrorSampler.value = M.texture, o.uniforms.textureMatrix.value = g, o.uniforms.alpha.value = L, o.uniforms.time.value = T, o.uniforms.normalSampler.value = R, o.uniforms.sunColor.value = j, o.uniforms.waterColor.value = k, o.uniforms.sunDirection.value = U, o.uniforms.distortionScale.value = V, o.uniforms.eye.value = S, s.material = o, s.onBeforeRender = function(r, E, m) {\n      if (c.setFromMatrixPosition(s.matrixWorld), h.setFromMatrixPosition(m.matrixWorld), d.extractRotation(s.matrixWorld), l.set(0, 0, 1), l.applyMatrix4(d), f.subVectors(c, h), f.dot(l) > 0)\n        return;\n      f.reflect(l).negate(), f.add(c), d.extractRotation(m.matrixWorld), x.set(0, 0, -1), x.applyMatrix4(d), x.add(h), p.subVectors(c, x), p.reflect(l).negate(), p.add(c), t.position.copy(f), t.up.set(0, 1, 0), t.up.applyMatrix4(d), t.up.reflect(l), t.lookAt(p), t.far = m.far, t.updateMatrixWorld(), t.projectionMatrix.copy(m.projectionMatrix), g.set(\n        0.5,\n        0,\n        0,\n        0.5,\n        0,\n        0.5,\n        0,\n        0.5,\n        0,\n        0,\n        0.5,\n        0.5,\n        0,\n        0,\n        0,\n        1\n      ), g.multiply(t.projectionMatrix), g.multiply(t.matrixWorldInverse), u.setFromNormalAndCoplanarPoint(l, c), u.applyMatrix4(t.matrixWorldInverse), n.set(u.normal.x, u.normal.y, u.normal.z, u.constant);\n      const a = t.projectionMatrix;\n      v.x = (Math.sign(n.x) + a.elements[8]) / a.elements[0], v.y = (Math.sign(n.y) + a.elements[9]) / a.elements[5], v.z = -1, v.w = (1 + a.elements[10]) / a.elements[14], n.multiplyScalar(2 / n.dot(v)), a.elements[2] = n.x, a.elements[6] = n.y, a.elements[10] = n.z + 1 - F, a.elements[14] = n.w, S.setFromMatrixPosition(m.matrixWorld);\n      const H = r.getRenderTarget(), I = r.xr.enabled, q = r.shadowMap.autoUpdate;\n      s.visible = !1, r.xr.enabled = !1, r.shadowMap.autoUpdate = !1, r.setRenderTarget(M), r.state.buffers.depth.setMask(!0), r.autoClear === !1 && r.clear(), r.render(E, t), s.visible = !0, r.xr.enabled = I, r.shadowMap.autoUpdate = q, r.setRenderTarget(H);\n      const _ = m.viewport;\n      _ !== void 0 && r.state.viewport(_);\n    };\n  }\n}\nexport {\n  re as Water\n};\n"],"names":["re","constructor","W","e","super","this","isWater","s","z","textureWidth","N","textureHeight","F","clipBias","L","alpha","T","time","R","waterNormals","U","sunDirection","j","sunColor","k","waterColor","S","eye","V","distortionScale","A","side","B","fog","u","l","c","h","d","x","n","f","p","v","g","t","M","y","uniforms","normalSampler","value","mirrorSampler","size","textureMatrix","vertexShader","fragmentShader","o","lights","texture","material","onBeforeRender","r","E","m","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","normal","constant","a","Math","sign","elements","w","multiplyScalar","H","getRenderTarget","I","xr","enabled","q","shadowMap","autoUpdate","visible","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","_","viewport"],"sourceRoot":""}