{"version":3,"file":"js/src_components_Sider_index_tsx.252ce29a.js","mappings":"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","sources":["webpack://sourcedao-pc-dapp/./src/components/Sider/index.tsx","webpack://sourcedao-pc-dapp/./src/utils/ipfs.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { Box, Button, TextField, IconButton, Tabs, Tab } from '@mui/material'\n\nimport { useSnackbar } from 'notistack'\n\nimport langHook from '@hooks/localHook'\nimport { siderLang } from '@langs/index'\n\nimport { useAppSelector, useAppDispatch } from '@store/index'\nimport { disconnectWallet } from '@store/modules/wallet'\nimport { setCurrentFriendIndex } from '@store/modules/friends'\n\nimport { userApi, ContractError } from '@api/index'\n\nimport { path } from '@utils/ipfs'\n\nimport AddBoxIcon from '@mui/icons-material/AddBox'\nimport LinkOffIcon from '@mui/icons-material/LinkOff'\n\nexport default (): JSX.Element => {\n  const { enqueueSnackbar } = useSnackbar()\n\n  const local = langHook()\n\n  const { friends, currentFriendIndex, currentFriend } = useAppSelector(\n    (state) => state.friends\n  )\n\n  const dispatch = useAppDispatch()\n\n  const [text, setText] = useState('')\n\n  const handle = async () => {\n    if (!text) return\n    try {\n      await userApi.add_friend(text)\n      setText('')\n      enqueueSnackbar(local(siderLang.successfulRequest), {\n        variant: 'success',\n      })\n    } catch (error) {\n      enqueueSnackbar((error as ContractError).kind.ExecutionError, {\n        variant: 'error',\n        autoHideDuration: 5000,\n      })\n    }\n  }\n\n  useEffect(() => {\n    if (!currentFriend) dispatch(setCurrentFriendIndex(0))\n  }, [friends])\n\n  return (\n    <Box\n      sx={{\n        width: 300,\n        height: '100vh',\n        pt: 2,\n        backgroundColor: '#fff',\n        boxSizing: 'border-box',\n        borderRight: '1px solid rgba(0, 0, 0, 0.12)',\n        position: 'relative',\n      }}\n    >\n      {/* title */}\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          mb: 2,\n          pl: 2.4,\n        }}\n      >\n        <TextField\n          label={local(siderLang.search)}\n          variant=\"outlined\"\n          size=\"small\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        />\n        <IconButton sx={{ ml: 1 }} onClick={handle}>\n          <AddBoxIcon />\n        </IconButton>\n      </Box>\n      {/* list */}\n      <Box\n        sx={{\n          width: '100%',\n          height: 'calc(100vh - 136px)',\n          bgcolor: 'background.paper',\n        }}\n      >\n        <Tabs\n          orientation=\"vertical\"\n          variant=\"scrollable\"\n          value={currentFriendIndex}\n          onChange={(_, i) => dispatch(setCurrentFriendIndex(i))}\n          sx={{\n            width: '100%',\n            height: '100%',\n            borderRight: 1,\n            borderColor: 'divider',\n          }}\n        >\n          {friends.map((friend, index) => {\n            return (\n              <Tab\n                key={friend.hash}\n                icon={<img style={{width: '30px'}} src={path(friend.image)} />}\n                iconPosition=\"start\"\n                label={friend.name}\n                sx={{\n                  pl: 3,\n                  justifyContent: 'left'\n                }}\n                {...{\n                  id: `vertical-tab-${index}`,\n                  'aria-controls': `vertical-tabpanel-${index}`,\n                }}\n              />\n            )\n          })}\n        </Tabs>\n      </Box>\n      {/* disconnect */}\n      {\n        <Box>\n          <Button\n            size=\"large\"\n            color=\"inherit\"\n            sx={{ width: '100%', height: 64 }}\n            startIcon={<LinkOffIcon />}\n            onClick={() => dispatch(disconnectWallet())}\n          >\n            {local(siderLang.disconnect)}\n          </Button>\n        </Box>\n      }\n    </Box>\n  )\n}\n","import { create, IPFS } from 'ipfs-core'\n\nlet _ipfs: IPFS | undefined = undefined\n\nconst createIpfs = async () => {\n  if (_ipfs) return _ipfs\n  return (_ipfs = await create())\n}\n\nexport const add = async (file: File): Promise<string> => {\n  const ipfs = await createIpfs()\n\n  try {\n    const added = await ipfs.add(file)\n    return added.cid.toString()\n  } catch (error) {\n    throw Error(error as string)\n  }\n}\n\nexport const cat = async <T>(cids: string[]): Promise<T[]> => {\n  const ipfs = await createIpfs()\n\n  const examJson: Promise<T>[] = []\n\n  cids.forEach((cid) => {\n    examJson.push(\n      new Promise(async (resolve) => {\n        const cated = await ipfs.cat(cid)\n        for await (const current of cated) {\n          resolve(JSON.parse(utf8ArrayToStr(current)))\n        }\n      })\n    )\n  })\n\n  return await Promise.all(examJson)\n}\n\nexport const path = (hash: string): string => `https://ipfs.io/ipfs/${hash}`\n\nconst utf8ArrayToStr = (array: Uint8Array): string => {\n  const len = array.length\n  let out, i, c, char2, char3\n\n  out = ''\n\n  i = 0\n  while (i < len) {\n    c = array[i++]\n    switch (c >> 4) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        out += String.fromCharCode(c)\n        break\n      case 12:\n      case 13:\n        char2 = array[i++]\n        out += String.fromCharCode(((c & 0x1f) << 6) | (char2 & 0x3f))\n        break\n      case 14:\n        char2 = array[i++]\n        char3 = array[i++]\n        out += String.fromCharCode(\n          ((c & 0x0f) << 12) | ((char2 & 0x3f) << 6) | ((char3 & 0x3f) << 0)\n        )\n        break\n    }\n  }\n\n  return out\n}\n"],"names":["enqueueSnackbar","useSnackbar","local","langHook","useAppSelector","state","friends","currentFriendIndex","currentFriend","dispatch","useAppDispatch","useState","text","setText","handle","userApi","siderLang","variant","kind","ExecutionError","autoHideDuration","useEffect","setCurrentFriendIndex","sx","width","height","pt","backgroundColor","boxSizing","borderRight","position","display","alignItems","mb","pl","label","size","value","onChange","e","target","ml","onClick","bgcolor","orientation","_","i","borderColor","map","friend","index","key","hash","icon","style","src","path","image","iconPosition","name","justifyContent","id","color","startIcon","disconnectWallet","_ipfs","undefined","createIpfs","create","add","file","ipfs","added","cid","toString","Error"],"sourceRoot":""}