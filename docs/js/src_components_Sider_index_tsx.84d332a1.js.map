{"version":3,"file":"js/src_components_Sider_index_tsx.84d332a1.js","mappings":"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","sources":["webpack://sourcedao-pc-dapp/./src/components/Customization/TextField.tsx","webpack://sourcedao-pc-dapp/./src/components/Sider/index.tsx","webpack://sourcedao-pc-dapp/./src/utils/ipfs.ts"],"sourcesContent":["import { TextField } from '@mui/material'\r\n\r\nimport { styled } from '@mui/material/styles'\r\n\r\nexport default styled(TextField)(({ theme }) => ({\r\n  '& .MuiInputBase-input': {\r\n    color: '#fff',\r\n  },\r\n  '& .MuiOutlinedInput-root': {\r\n    '& fieldset': {\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n    '&:hover fieldset': {\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n}))\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { Box, Button, IconButton, Tabs, Tab, TabProps } from '@mui/material'\r\n\r\nimport { styled } from '@mui/material/styles'\r\n\r\nimport { useSnackbar } from 'notistack'\r\n\r\nimport langHook from '@hooks/localHook'\r\nimport { siderLang } from '@langs/index'\r\n\r\nimport { useAppSelector, useAppDispatch } from '@store/index'\r\nimport { disconnectWallet } from '@store/modules/wallet'\r\nimport { setCurrentFriendIndex } from '@store/modules/friends'\r\n\r\nimport { userApi } from '@api/index'\r\n\r\nimport { path } from '@utils/ipfs'\r\n\r\nimport { TextField } from '@components/Customization'\r\n\r\nimport AddBoxIcon from '@mui/icons-material/AddBox'\r\nimport LinkOffIcon from '@mui/icons-material/LinkOff'\r\n\r\nconst AntTab = styled((props: TabProps) => <Tab {...props} />)(() => ({\r\n  color: 'rgba(255, 255, 255, 0.85)',\r\n}))\r\n\r\nexport default (): JSX.Element => {\r\n  const { enqueueSnackbar } = useSnackbar()\r\n\r\n  const local = langHook()\r\n\r\n  const { friends, currentFriendIndex, currentFriend } = useAppSelector(\r\n    (state) => state.friends\r\n  )\r\n\r\n  const dispatch = useAppDispatch()\r\n\r\n  const [text, setText] = useState('')\r\n\r\n  const handle = async () => {\r\n    if (!text) return\r\n    try {\r\n      await userApi.add_friend(text)\r\n      setText('')\r\n      enqueueSnackbar(local(siderLang.successfulRequest), {\r\n        variant: 'success',\r\n      })\r\n    } catch (error) {}\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentFriend) dispatch(setCurrentFriendIndex(0))\r\n  }, [friends])\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: 300,\r\n        height: '100vh',\r\n        pt: 2,\r\n        backgroundColor: '#000',\r\n        boxSizing: 'border-box',\r\n        borderRight: '1px solid rgba(255, 255, 255, 0.12)',\r\n        position: 'relative',\r\n      }}\r\n    >\r\n      {/* title */}\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          mb: 2,\r\n          pl: 2.4,\r\n        }}\r\n      >\r\n        <TextField\r\n          label={local(siderLang.search)}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n        />\r\n        <IconButton color=\"primary\" sx={{ ml: 1 }} onClick={handle}>\r\n          <AddBoxIcon />\r\n        </IconButton>\r\n      </Box>\r\n      {/* list */}\r\n      <Box\r\n        sx={{\r\n          width: '100%',\r\n          height: 'calc(100vh - 136px)',\r\n        }}\r\n      >\r\n        <Tabs\r\n          orientation=\"vertical\"\r\n          variant=\"scrollable\"\r\n          value={currentFriendIndex}\r\n          onChange={(_, i) => dispatch(setCurrentFriendIndex(i))}\r\n          sx={{\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRight: 1,\r\n            borderColor: 'divider',\r\n          }}\r\n        >\r\n          {friends.map((friend, index) => {\r\n            return (\r\n              <AntTab\r\n                key={friend.hash}\r\n                icon={\r\n                  <img style={{ width: '30px' }} src={path(friend.image)} />\r\n                }\r\n                iconPosition=\"start\"\r\n                label={friend.name}\r\n                sx={{\r\n                  pl: 3,\r\n                  justifyContent: 'left',\r\n                }}\r\n                {...{\r\n                  id: `vertical-tab-${index}`,\r\n                  'aria-controls': `vertical-tabpanel-${index}`,\r\n                }}\r\n              />\r\n            )\r\n          })}\r\n        </Tabs>\r\n      </Box>\r\n      {/* disconnect */}\r\n      {\r\n        <Box>\r\n          <Button\r\n            size=\"large\"\r\n            color=\"primary\"\r\n            sx={{ width: '100%', height: 64 }}\r\n            startIcon={<LinkOffIcon />}\r\n            onClick={() => dispatch(disconnectWallet())}\r\n          >\r\n            {local(siderLang.disconnect)}\r\n          </Button>\r\n        </Box>\r\n      }\r\n    </Box>\r\n  )\r\n}\r\n","import { create, IPFS } from 'ipfs-core'\r\n\r\nlet _ipfs: IPFS | undefined = undefined\r\n\r\nconst createIpfs = async () => {\r\n  if (_ipfs) return _ipfs\r\n  return (_ipfs = await create())\r\n}\r\n\r\nexport const add = async (file: File): Promise<string> => {\r\n  const ipfs = await createIpfs()\r\n\r\n  try {\r\n    const added = await ipfs.add(file)\r\n    return added.cid.toString()\r\n  } catch (error) {\r\n    throw Error(error as string)\r\n  }\r\n}\r\n\r\nexport const cat = async <T>(cids: string[]): Promise<T[]> => {\r\n  const ipfs = await createIpfs()\r\n\r\n  const examJson: Promise<T>[] = []\r\n\r\n  cids.forEach((cid) => {\r\n    examJson.push(\r\n      new Promise(async (resolve) => {\r\n        const cated = await ipfs.cat(cid)\r\n        for await (const current of cated) {\r\n          resolve(JSON.parse(utf8ArrayToStr(current)))\r\n        }\r\n      })\r\n    )\r\n  })\r\n\r\n  return await Promise.all(examJson)\r\n}\r\n\r\nexport const path = (hash: string): string => `https://ipfs.io/ipfs/${hash}`\r\n\r\nconst utf8ArrayToStr = (array: Uint8Array): string => {\r\n  const len = array.length\r\n  let out, i, c, char2, char3\r\n\r\n  out = ''\r\n\r\n  i = 0\r\n  while (i < len) {\r\n    c = array[i++]\r\n    switch (c >> 4) {\r\n      case 0:\r\n      case 1:\r\n      case 2:\r\n      case 3:\r\n      case 4:\r\n      case 5:\r\n      case 6:\r\n      case 7:\r\n        out += String.fromCharCode(c)\r\n        break\r\n      case 12:\r\n      case 13:\r\n        char2 = array[i++]\r\n        out += String.fromCharCode(((c & 0x1f) << 6) | (char2 & 0x3f))\r\n        break\r\n      case 14:\r\n        char2 = array[i++]\r\n        char3 = array[i++]\r\n        out += String.fromCharCode(\r\n          ((c & 0x0f) << 12) | ((char2 & 0x3f) << 6) | ((char3 & 0x3f) << 0)\r\n        )\r\n        break\r\n    }\r\n  }\r\n\r\n  return out\r\n}\r\n"],"names":["styled","TextField","theme","color","borderColor","palette","primary","main","AntTab","props","enqueueSnackbar","useSnackbar","local","langHook","useAppSelector","state","friends","currentFriendIndex","currentFriend","dispatch","useAppDispatch","useState","text","setText","handle","userApi","siderLang","variant","useEffect","setCurrentFriendIndex","sx","width","height","pt","backgroundColor","boxSizing","borderRight","position","display","alignItems","mb","pl","label","size","value","onChange","e","target","ml","onClick","orientation","_","i","map","friend","index","key","hash","icon","style","src","path","image","iconPosition","name","justifyContent","id","startIcon","disconnectWallet","_ipfs","undefined","createIpfs","create","add","file","ipfs","added","cid","toString","Error"],"sourceRoot":""}