{"version":3,"file":"js/src_components_Sider_index_tsx.84d332a1.js","mappings":";mLAIA,SAAeA,WAAAA,IAAOC,EAAAA,EAAtB,EAAiC,gBAAGC,EAAK,EAALA,MAAK,MAAQ,CAC/C,wBAAyB,CACvBC,MAAO,QAET,2BAA4B,CAC1B,aAAc,CACZC,YAAaF,EAAMG,QAAQC,QAAQC,MAErC,mBAAoB,CAClBH,YAAaF,EAAMG,QAAQC,QAAQC,OAGxC,isBCfD,2pNAuBA,IAAMC,GAASR,EAAAA,EAAAA,KAAO,SAACS,GAAe,OAAK,gBAAC,IAAQA,EAAS,GAA9CT,EAAgD,iBAAO,CACpEG,MAAO,4BACR,IAED,mBACE,IA5BF,IA4BUO,GAAoBC,EAAAA,EAAAA,MAApBD,gBAEFE,GAAQC,EAAAA,EAAAA,KAEd,GAAuDC,EAAAA,EAAAA,KACrD,SAACC,GAAK,OAAKA,EAAMC,OAAO,IADlBA,EAAO,EAAPA,QAASC,EAAkB,EAAlBA,mBAAoBC,EAAa,EAAbA,cAI/BC,GAAWC,EAAAA,EAAAA,MAEmB,GAtCtC,GAsC0BC,EAAAA,EAAAA,UAAS,IAtCnC,EAsCsC,EAtCtC,k5BAsCSC,EAAI,KAAEC,EAAO,KAEdC,EAAM,eAxCd,EAwCc,GAxCd,EAwCc,UAAG,iFACRF,EAAM,CAAF,yEAEDG,EAAAA,EAAAA,WAAmBH,GAAK,OAC9BC,EAAQ,IACRb,EAAgBE,EAAMc,EAAAA,GAAAA,IAA8B,CAClDC,QAAS,YACT,wGA/CR,+KAiDG,kBATW,mCAeZ,OAJAC,EAAAA,EAAAA,YAAU,WACHV,GAAeC,GAASU,EAAAA,EAAAA,IAAsB,GACrD,GAAG,CAACb,IAGF,gBAAC,IAAG,CACFc,GAAI,CACFC,MAAO,IACPC,OAAQ,QACRC,GAAI,EACJC,gBAAiB,OACjBC,UAAW,aACXC,YAAa,sCACbC,SAAU,aAIZ,gBAAC,IAAG,CACFP,GAAI,CACFQ,QAAS,OACTC,WAAY,SACZC,GAAI,EACJC,GAAI,MAGN,gBAAC,IAAS,CACRC,MAAO9B,EAAMc,EAAAA,GAAAA,IACbC,QAAQ,WACRgB,KAAK,QACLC,MAAOtB,EACPuB,SAAU,SAACC,GAAC,OAAKvB,EAAQuB,EAAEC,OAAOH,MAAM,IAE1C,gBAAC,IAAU,CAACzC,MAAM,UAAU2B,GAAI,CAAEkB,GAAI,GAAKC,QAASzB,GAClD,gBAAC,IAAU,QAIf,gBAAC,IAAG,CACFM,GAAI,CACFC,MAAO,OACPC,OAAQ,wBAGV,gBAAC,IAAI,CACHkB,YAAY,WACZvB,QAAQ,aACRiB,MAAO3B,EACP4B,SAAU,SAACM,EAAGC,GAAC,OAAKjC,GAASU,EAAAA,EAAAA,IAAsBuB,GAAG,EACtDtB,GAAI,CACFC,MAAO,OACPC,OAAQ,OACRI,YAAa,EACbhC,YAAa,YAGdY,EAAQqC,KAAI,SAACC,EAAQC,GACpB,OACE,gBAAC/C,EAAM,CACLgD,IAAKF,EAAOG,KACZC,KACE,uBAAKC,MAAO,CAAE5B,MAAO,QAAU6B,KAAKC,EAAAA,EAAAA,IAAKP,EAAOQ,SAElDC,aAAa,QACbrB,MAAOY,EAAOU,KACdlC,GAAI,CACFW,GAAI,EACJwB,eAAgB,QAGhBC,GAAI,gBAAF,OAAkBX,GACpB,gBAAiB,qBAAF,OAAuBA,IAI9C,MAKF,gBAAC,IAAG,KACF,gBAAC,IAAM,CACLZ,KAAK,QACLxC,MAAM,UACN2B,GAAI,CAAEC,MAAO,OAAQC,OAAQ,IAC7BmC,UAAW,gBAAC,IAAW,MACvBlB,QAAS,kBAAM9B,GAASiD,EAAAA,EAAAA,MAAmB,GAE1CxD,EAAMc,EAAAA,GAAAA,MAMlB,ueChJD,ovNACA,IAAI2C,OAA0BC,EAExBC,EAAU,6BAAG,kFACbF,EAAO,CAAF,wCAASA,GAAK,wBACDG,EAAAA,EAAAA,MAAQ,gCAAtBH,EAAQ,EAAH,iDACd,kBAHe,mCAKHI,EAAG,6BAAG,WAAOC,GAAU,yFACfH,IAAY,OAArB,OAAJI,EAAO,EAAH,uBAGYA,EAAKF,IAAIC,GAAK,OAAvB,OAALE,EAAQ,EAAH,uBACJA,EAAMC,IAAIC,YAAU,wCAErBC,MAAM,EAAD,IAAiB,0DAE/B,gBATe,sCA8BHlB,EAAO,SAACJ,GAAY,qCAAqCA,EAAI","sources":["webpack://sourcedao-pc-dapp/./src/components/Customization/TextField.tsx","webpack://sourcedao-pc-dapp/./src/components/Sider/index.tsx","webpack://sourcedao-pc-dapp/./src/utils/ipfs.ts"],"sourcesContent":["import { TextField } from '@mui/material'\n\nimport { styled } from '@mui/material/styles'\n\nexport default styled(TextField)(({ theme }) => ({\n  '& .MuiInputBase-input': {\n    color: '#fff',\n  },\n  '& .MuiOutlinedInput-root': {\n    '& fieldset': {\n      borderColor: theme.palette.primary.main,\n    },\n    '&:hover fieldset': {\n      borderColor: theme.palette.primary.main,\n    },\n  },\n}))\n","import React, { useState, useEffect } from 'react'\n\nimport { Box, Button, IconButton, Tabs, Tab, TabProps } from '@mui/material'\n\nimport { styled } from '@mui/material/styles'\n\nimport { useSnackbar } from 'notistack'\n\nimport langHook from '@hooks/localHook'\nimport { siderLang } from '@langs/index'\n\nimport { useAppSelector, useAppDispatch } from '@store/index'\nimport { disconnectWallet } from '@store/modules/wallet'\nimport { setCurrentFriendIndex } from '@store/modules/friends'\n\nimport { userApi } from '@api/index'\n\nimport { path } from '@utils/ipfs'\n\nimport { TextField } from '@components/Customization'\n\nimport AddBoxIcon from '@mui/icons-material/AddBox'\nimport LinkOffIcon from '@mui/icons-material/LinkOff'\n\nconst AntTab = styled((props: TabProps) => <Tab {...props} />)(() => ({\n  color: 'rgba(255, 255, 255, 0.85)',\n}))\n\nexport default (): JSX.Element => {\n  const { enqueueSnackbar } = useSnackbar()\n\n  const local = langHook()\n\n  const { friends, currentFriendIndex, currentFriend } = useAppSelector(\n    (state) => state.friends\n  )\n\n  const dispatch = useAppDispatch()\n\n  const [text, setText] = useState('')\n\n  const handle = async () => {\n    if (!text) return\n    try {\n      await userApi.add_friend(text)\n      setText('')\n      enqueueSnackbar(local(siderLang.successfulRequest), {\n        variant: 'success',\n      })\n    } catch (error) {}\n  }\n\n  useEffect(() => {\n    if (!currentFriend) dispatch(setCurrentFriendIndex(0))\n  }, [friends])\n\n  return (\n    <Box\n      sx={{\n        width: 300,\n        height: '100vh',\n        pt: 2,\n        backgroundColor: '#000',\n        boxSizing: 'border-box',\n        borderRight: '1px solid rgba(255, 255, 255, 0.12)',\n        position: 'relative',\n      }}\n    >\n      {/* title */}\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          mb: 2,\n          pl: 2.4,\n        }}\n      >\n        <TextField\n          label={local(siderLang.search)}\n          variant=\"outlined\"\n          size=\"small\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        />\n        <IconButton color=\"primary\" sx={{ ml: 1 }} onClick={handle}>\n          <AddBoxIcon />\n        </IconButton>\n      </Box>\n      {/* list */}\n      <Box\n        sx={{\n          width: '100%',\n          height: 'calc(100vh - 136px)',\n        }}\n      >\n        <Tabs\n          orientation=\"vertical\"\n          variant=\"scrollable\"\n          value={currentFriendIndex}\n          onChange={(_, i) => dispatch(setCurrentFriendIndex(i))}\n          sx={{\n            width: '100%',\n            height: '100%',\n            borderRight: 1,\n            borderColor: 'divider',\n          }}\n        >\n          {friends.map((friend, index) => {\n            return (\n              <AntTab\n                key={friend.hash}\n                icon={\n                  <img style={{ width: '30px' }} src={path(friend.image)} />\n                }\n                iconPosition=\"start\"\n                label={friend.name}\n                sx={{\n                  pl: 3,\n                  justifyContent: 'left',\n                }}\n                {...{\n                  id: `vertical-tab-${index}`,\n                  'aria-controls': `vertical-tabpanel-${index}`,\n                }}\n              />\n            )\n          })}\n        </Tabs>\n      </Box>\n      {/* disconnect */}\n      {\n        <Box>\n          <Button\n            size=\"large\"\n            color=\"primary\"\n            sx={{ width: '100%', height: 64 }}\n            startIcon={<LinkOffIcon />}\n            onClick={() => dispatch(disconnectWallet())}\n          >\n            {local(siderLang.disconnect)}\n          </Button>\n        </Box>\n      }\n    </Box>\n  )\n}\n","import { create, IPFS } from 'ipfs-core'\n\nlet _ipfs: IPFS | undefined = undefined\n\nconst createIpfs = async () => {\n  if (_ipfs) return _ipfs\n  return (_ipfs = await create())\n}\n\nexport const add = async (file: File): Promise<string> => {\n  const ipfs = await createIpfs()\n\n  try {\n    const added = await ipfs.add(file)\n    return added.cid.toString()\n  } catch (error) {\n    throw Error(error as string)\n  }\n}\n\nexport const cat = async <T>(cids: string[]): Promise<T[]> => {\n  const ipfs = await createIpfs()\n\n  const examJson: Promise<T>[] = []\n\n  cids.forEach((cid) => {\n    examJson.push(\n      new Promise(async (resolve) => {\n        const cated = await ipfs.cat(cid)\n        for await (const current of cated) {\n          resolve(JSON.parse(utf8ArrayToStr(current)))\n        }\n      })\n    )\n  })\n\n  return await Promise.all(examJson)\n}\n\nexport const path = (hash: string): string => `https://ipfs.io/ipfs/${hash}`\n\nconst utf8ArrayToStr = (array: Uint8Array): string => {\n  const len = array.length\n  let out, i, c, char2, char3\n\n  out = ''\n\n  i = 0\n  while (i < len) {\n    c = array[i++]\n    switch (c >> 4) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        out += String.fromCharCode(c)\n        break\n      case 12:\n      case 13:\n        char2 = array[i++]\n        out += String.fromCharCode(((c & 0x1f) << 6) | (char2 & 0x3f))\n        break\n      case 14:\n        char2 = array[i++]\n        char3 = array[i++]\n        out += String.fromCharCode(\n          ((c & 0x0f) << 12) | ((char2 & 0x3f) << 6) | ((char3 & 0x3f) << 0)\n        )\n        break\n    }\n  }\n\n  return out\n}\n"],"names":["styled","TextField","theme","color","borderColor","palette","primary","main","AntTab","props","enqueueSnackbar","useSnackbar","local","langHook","useAppSelector","state","friends","currentFriendIndex","currentFriend","dispatch","useAppDispatch","useState","text","setText","handle","userApi","siderLang","variant","useEffect","setCurrentFriendIndex","sx","width","height","pt","backgroundColor","boxSizing","borderRight","position","display","alignItems","mb","pl","label","size","value","onChange","e","target","ml","onClick","orientation","_","i","map","friend","index","key","hash","icon","style","src","path","image","iconPosition","name","justifyContent","id","startIcon","disconnectWallet","_ipfs","undefined","createIpfs","create","add","file","ipfs","added","cid","toString","Error"],"sourceRoot":""}